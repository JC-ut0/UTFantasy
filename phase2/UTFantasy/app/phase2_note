#########
# Step 1
- Copy all files to phase2 directory, and renamed some file from .phase1. to .phase2.
- Created phase2_note.txt and phase2_TODO.txt for later notes.

#########
# Step 2
Files affected: LoginActivity.java, activity_login.xml
New feature: Remember password, and full screen activity.
            - now if the user selects remember password, his password and username will be stored
            for his next login.

#########
# Step 3
Code affected: MapManager.mapInitialization()
Flaw: Some of "treeImage" are missing in the highMap.
Fix: Add missing "treeImage" to the highMap.

#########
# Step 4
File affected: Person.java, Player.java
Rename pokemon to pokemonList, since this variable refers to an ArrayList.

#########
# Step 5
File added: README
File affected: all files
Created README file, Reformat for all files.

#########
# Step 6
Package affected: Map
Flaw: MapManager violates SOLID, refactor the whole map system according to MVP and SOLID. Use
design patterns as much as possible. Please see the details of whole structure in uml.

########
# Step 7
Flaw: ArrayList is too specific to construct.
Fix: Change ArrayList to List.

########
# Step 8
File affected: MenuActivity.java, PlayerInfoActivity.java
Flaw: These activities violate SOLID
Fix: create a InfoMediator.java, pass the information to the activity. And create ItemAdapter to
control the action from the activity.

########
# Step 9
File affected: ProductSelectActivity.java
Create a new activity and the following java class. Now we can select pokemons at the beginning of
a fight.

########
# Step 10
Refactor for User, UserData, and LoginActivity
Since lots of activities interact with UserData, most files are affected.
File affected: Most activities
- Created UserIO for data access
- Refactored for LoginActivity by MVP
- Refactored UserManager by Single responsibility principle
- Created UML folder for a series of UML diagrams.
- More on LoginActivity UML, please have a look at the LoginActivity_UML.pdf

########
# Step 11
File affected: StartUpActivity, LoginActivity
- Rewrite StartUpActivity allowing user to choose start game or go to the scoreboard.
- LoginActivity can go back to StartUpActivity

########
# Step 12
File affected: NPC, Player
- Refactored NPC duty with Duty enum
- Added comparators of player to do rank sort later in the scoreboard Activity.
- Added unit test for player comparators.
- Created a ScoreBoard Activity (need list view)

########
# Step 13
File affected: ScoreboardActivity java and xml
- implemented ScoreboardActivity methods
- completed

#########
# Step 14
File Added: PotionFactory
File affected: NPC, SellerNPC, FighterNPC, HealerNPC, ShopActivity, ShopDialog
Create a PotionFactory which can be used to create different potions.
Delete some unnecessary methods in all NPC classes.
Change the method of trade.
Rename ShopDialog.

########
# Step 15
File added: ProductAdapter
Create a new ShopActivity. Use ListView to present Products in the shop. We can easily add products
in the shop without modifying too much code, which follows Open/Closed Principle.

########
# Step 16
File affected: RedPotion, PinkPotion, PurplePotion,PotionFactory
Flaw: there exists static methods and variables.
Fix: get rid of static methods and variables.

########
#step 17
File added: ProductCreator, ProductBuilder, PotionBuilder
Use Builder Design Pattern to create products in shop.

########
#step 18
File added: ShopInteractor, ShopPresenter, ShopView
File affected: ShopActivity
Apply MVP in ShopActivity.

########
# step 19
File affected: ShopActivity, ShopPresenter, ShopInteractor, ShopView
Add new methods to update information of products.

########
# step 20
File added: PokemonBall
Add a new product, pokemon ball, in shop.

########
# Step 21
File affected: Package(Battle, Map, AllSkills, Character, Pet)
Use linked list to refactor Battle system according to MVP. Please see the details of the whole
structure in the uml. Change constant variables used in map and character to enum.

########
# Step 22
File affected: Package(mapUI, mapDomain, npcDomain)
Try to package map and npc system by ports and adapters. Apply strategy pattern to NPC.duty. Add
functionality that some npc can display icon when dialogue is ongoing.

########
# Step 23
File affected: PlayerInfoActivity
update PlayerInfoActivity to show the top percentile of the player ordered by pokemon max level

########
# Step 24
File affected: Package:Battle, PokemonBall
Add functionality that player can catch or heal pokemon.

########
# Step 25
File affected: Pokemon, ItemManager, Player, PlayerManager, BattleInteractor
Fix bugs that possibly occur when use items.

########
# Step 26
File affected: mapDomain, mapPresenter
Add feature that make the drawn screen size changeable.

########
# Step 27
File affected: mapBuilder, mapPresenter
Designed and implemented the game map by Bitmap.

########
# Step 28
File affected: Player, MovementManager, WildPokemonChecker, MainActivity, ItemManager
Add feature that player can encounter wild pokemons. Fix bug that pokemon didn't get set master
after got caught

########
# Step 29
File affected: all files under AllSkills package
- add a Skill Factory
- refactored all skill constructors following builder and factory pattern.

########
# Step 30
File affected: all files under pet package
- add a Pokemon Factory
- refactored all pokemon constructors following builder and factory patten.

########
# Step 31
File affected: ItemManager, BattleInteractor
Make the shown text during battle more reasonable, add grass to the map, fix bugs.

########
# Step 32
File affected: Package(Battle, Activities.evolutionUI)
Add feature that certain pokemons can evolve at certain levels.

#######
# Step 33
File affected: Package: Battle, MapUI, MapUseCase, Evolution
Make pokemons able to evolve after fight instead of during fight. Fix bugs possibly that possibly
occur during evolution. Improve evolution animation, improve battle dialogue.

#######
# Step 32
File affected: Package: evolution, battle, mapUI, mapUseCase, class: BattleObserver, WildPokemonObserver
Write docStrings for those files, handles exception, solve warnings